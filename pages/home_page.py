"""
–ö–∞—Ä–∫–∞—Å –º–æ–¥—É–ª—è home_page –¥–ª—è Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–¢–µ–ø–µ—Ä—å –≤–µ—Å—å –∫–æ–¥ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ **pages/home_page.py**, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ views/pages —É–±—Ä–∞–Ω–æ.
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ **controllers/home_controller.py**.
"""

# ============================================================================
# controllers/home_controller.py
# ============================================================================
"""–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_session()."""

import streamlit as st
import os
from db.db_session import get_session
from sqlalchemy import func, select
from controllers import home_controller as ctrl
from models.models import (
    Comment,
    Channel,
    Video,
    SearchQuery,
    MatchedComment,
)
import platform
import signal


def _aggregate_counts(session):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ KPI ‚Äî –ø–æ –æ–¥–Ω–æ–º—É SQL-–∑–∞–ø—Ä–æ—Å—É –Ω–∞ –º–µ—Ç—Ä–∏–∫—É."""
    total_comments = session.scalar(select(func.count(Comment.id)))
    total_videos = session.scalar(select(func.count(Video.id)))
    total_channels = session.scalar(select(func.count(Channel.id)))
    total_queries = session.scalar(select(func.count(SearchQuery.id)))
    total_matches = session.scalar(select(func.count(MatchedComment.id)))
    latest_comment_date = session.scalar(
        select(func.max(Comment.published_time)))

    return (
        total_comments,
        total_videos,
        total_channels,
        total_queries,
        total_matches,
        latest_comment_date,
    )


def get_global_stats():
    """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞."""
    with get_session() as session:
        return dict(zip(
            ["total_comments", "total_videos", "total_channels",
             "total_queries", "total_matches", "latest_comment_date"],
            _aggregate_counts(session)
        ))

# ============================================================================
# pages/home_page.py
# ============================================================================


@st.cache_data(ttl=60, show_spinner=False)
def _fetch_stats():
    """–ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –Ω–∞ 60 —Å–µ–∫—É–Ω–¥."""
    return ctrl.get_global_stats()


def render():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —Å KPI –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–∫–ª—é—á–µ–Ω–∏—è."""

    st.title("üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ YouTube")
    stats = _fetch_stats()

    # KPI-–ø–∞–Ω–µ–ª—å -------------------------------------------------------------
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", f"{stats['total_comments']:,}")
    col2.metric("üé• –í–∏–¥–µ–æ", f"{stats['total_videos']:,}")
    col3.metric("üì∫ –ö–∞–Ω–∞–ª—ã", f"{stats['total_channels']:,}")
    col4.metric("üîç –ó–∞–ø—Ä–æ—Å—ã", f"{stats['total_queries']:,}")
    col5.metric("üîó –ú–∞—Ç—á–∏", f"{stats['total_matches']:,}")

    if stats["latest_comment_date"]:
        st.caption(
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ø–∞—Ä—Å–µ–Ω **{stats['latest_comment_date']:%d %b %Y}**")

    st.divider()

    # –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ------------------------------------------------------
    st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    if st.button("üö™ –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", type="secondary", key="shutdown-btn-page"):
        st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è‚Ä¶")
        if platform.system() == "Windows":
            os._exit(0)
        else:
            os.kill(os.getpid(), signal.SIGTERM)

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", key="reload-btn"):
        st.rerun()

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", key="clear-cache-btn"):
        st.cache_data.clear()
        st.rerun()


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∑–∞–ø—É—Å–∫–æ–º —á–µ—Ä–µ–∑ Streamlit

if __name__ == "__main__":
    render()
